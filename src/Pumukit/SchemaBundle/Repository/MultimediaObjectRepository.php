<?php

namespace Pumukit\SchemaBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Pumukit\SchemaBundle\Document\Series;
use Pumukit\SchemaBundle\Document\MultimediaObject;

/**
 * MultimediaObjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MultimediaObjectRepository extends DocumentRepository
{
    /**
     * Find all multimedia objects in a series with given status
     *
     * @param Series $series
     * @param array $status
     * @return ArrayCollection
     */
    public function findWithStatus(Series $series, array $status)
    {
        return $this->createQueryBuilder()
          ->field('series')->references($series)
          ->field('status')->in($status)
          ->getQuery()
          ->execute()
          ->sort(array('rank', 'desc'));
    }
    
    /**
     * Find multimedia object prototype
     *
     * @param Series $series
     * @param array $status
     * @return MultimediaObject
     */
    public function findPrototype(Series $series)
    {
        return $this->createQueryBuilder()
          ->field('series')->references($series)
          ->field('status')->equals(MultimediaObject::STATUS_PROTOTYPE)
          ->getQuery()
          ->getSingleResult();
    }

    /**
     * Find multimedia objects in a series
     * without the template (prototype)
     *
     * @param Series $series
     * @return ArrayCollection
     */
    public function findWithoutPrototype(Series $series)
    {
        $aux = $this->createQueryBuilder()
          ->field('series')->references($series)
          ->field('status')->notEqual(MultimediaObject::STATUS_PROTOTYPE)
          ->getQuery()
          ->execute()
          ->sort(array('rank', 'desc'));
        
        return $aux;
    }

    /**
     * Find multimedia objects by pic id
     *
     * @param string $picId
     * @return MultimediaObject
     */
    public function findByPicId($picId)
    {
        return $this->createQueryBuilder()
          ->field('pics._id')->equals(new \MongoId($picId))
          ->getQuery()
          ->getSingleResult();
    }
    
    /**
     * Find multimedia objects by person id
     *
     * @param string $personId
     * @return ArrayCollection
     */
    public function findByPersonId($personId)
    {
        return $this->createQueryBuilder()
          ->field('people_in_multimedia_object.people._id')->equals(new \MongoId($personId))
          ->getQuery()
          ->execute();
    }

    /**
     * Find multimedia objects by person id
     * with given role
     *
     * @param string $personId
     * @param string $roleCod
     * @return ArrayCollection
     */
    public function findByPersonIdWithRoleCod($personId, $roleCod)
    {
        /* TODO - Fails in this case -> MultimediaObject with: #6100
           Person 1 with Role 1
           Person 2 with Role 2
           
           findByPersonIdWithRoleCode(Person 1, Role 2)
           -> returns this MultimediaObject because it has a person
           with id 1 and has a person with role 2
        */
        return $this->createQueryBuilder()
          ->field('people_in_multimedia_object.people._id')->equals(new \MongoId($personId))
          ->field('people_in_multimedia_object.cod')->equals($roleCod)
          ->getQuery()
          ->execute();
    }

    /**
     * Find series by person id
     *
     * @param string $personId
     * @return ArrayCollection
     */
    public function findSeriesFieldByPersonId($personId)
    {
        return $this->createQueryBuilder()
          ->field('people_in_multimedia_object.people._id')->equals(new \MongoId($personId))
          ->distinct('series')
          ->getQuery()
          ->execute();
    }

    /**
     * Find series with tag
     *
     * @param string $tagId
     * @return ArrayCollection
     */
    public function findSeriesFieldByTagId($tagId)
    {
        return $this->createQueryBuilder()
          ->field('tags._id')->equals(new \MongoId($tagId))
          ->distinct('series')
          ->getQuery()
          ->execute();
    }

    /**
     * Find one series with tag
     *
     * @param string $tagId
     * @return Series
     */
    public function findOneSeriesFieldByTagId($tagId)
    {
        return $this->createQueryBuilder()
          ->field('tags._id')->equals(new \MongoId($tagId))
          ->distinct('series')
          ->getQuery()
          ->getSingleResult()
          ->execute();
    }

    /**
     * Find series with any tag
     *
     * @param array $tags
     * @return ArrayCollection
     */
    public function findSeriesFieldWithAnyTag($tags)
    {
      // TODO
    }

    /**
     * Find series with all tags
     *
     * @param array $tags
     * @return ArrayCollection
     */
    public function findSeriesFieldWithAllTags($tags)
    {
      // TODO
    }

    /**
     * Find one series with all tags
     *
     * @param array $tags
     * @return Series
     */
    public function findOneSeriesFieldWithAllTags($tags)
    {
      // TODO
    }

    /**
     * Find series without tag id
     *
     * @param string $tagId
     * @return ArrayCollection
     */
    public function findSeriesFieldWithouthTagId($tagId)
    {
      // TODO
    }

    /**
     * Find one series without tag id
     *
     * @param string $tagId
     * @return Series
     */
    public function findOneSeriesFieldWithoutTag($tagId)
    {
      // TODO
    }

    /**
     * Find series without all tags
     *
     * @param array tags
     * @return ArrayCollection
     */
    public function findSeriesFieldWithoutAllTags($tags)
    {
      // TODO
    }

    /**
     * Find series without some tags
     *
     * @param array $tags
     * @return ArrayCollection
     */
    public function findSeriesFieldWithoutSomeTags($tags)
    {
      // TODO
    }

    /**
     * Find multimedia objects by tag id
     *
     * @param string $tagId
     * @return ArrayCollection
     */
    public function findByTagId($tagId)
    {
        return $this->createQueryBuilder()
          ->field('tags._id')->equals(new \MongoId($tagId))
          ->getQuery()
          ->execute();
    }

    /**
     * Find one multimedia object by tag id
     *
     * @param string $tagId
     * @return MultimediaObject
     */
    public function findOneByTagId($tagId)
    {
        return $this->createQueryBuilder()
          ->field('tags._id')->equals(new \MongoId($tagId))
          ->getQuery()
          ->getSingleResult()
          ->execute();
    }

    /**
     * Find multimedia objects with any tag
     *
     * @param array $tags
     * @return ArrayCollection
     */
    public function findWithAnyTag($tags)
    {
      // TODO
    }

    /**
     * Find multimedia objects with all tags
     *
     * @param array $tags
     * @return ArrayCollection
     */
    public function findWithAllTags($tags)
    {
      // TODO
    }

    /**
     * Find one multimedia object with all tags
     *
     * @param array $tags
     * @return MultimediaObject
     */
    public function findOneWithAllTags($tags)
    {
      // TODO
    }

    /**
     * Find multimedia objects without tag id
     *
     * @param string $tagId
     * @return ArrayCollection
     */
    public function findWithouthTagId($tagId)
    {
      // TODO
    }

    /**
     * Find one multimedia object without tag id
     *
     * @param string $tagId
     * @return MultimediaObject
     */
    public function findOneWithoutTag($tagId)
    {
      // TODO
    }

    /**
     * Find multimedia objects without all tags
     *
     * @param array tags
     * @return ArrayCollection
     */
    public function findWithoutAllTags($tags)
    {
      // TODO
    }

    /**
     * Find multimedia objects without some tags
     *
     * @param array $tags
     * @return ArrayCollection
     */
    public function findWithoutSomeTags($tags)
    {
      // TODO
    }

}
